{"version":3,"sources":["components/Header.js","components/SearchForm.js","components/Movie.js","components/MovieList.js","components/Footer.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","SearchForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","props","searchMovie","onSubmit","htmlFor","onChange","placeholder","name","aria-label","type","Movie","key","title","overview","release_date","src","url_path","poster_path","alt","MovieList","movies","map","movie","index","components_Movie","genre_ids","vote_average","Footer","App","genres","text","_this2","url","concat","fetch","method","then","results","json","data","_this3","console","log","components_Header","components_SearchForm","components_MovieList","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMAaeA,0LATP,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,4BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,8BALKC,IAAMC,YC6CZC,cA3CX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,MAAO,IAEXR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IANVA,4EASDa,GACTV,KAAKW,SAAS,CACVN,MAAOK,EAAEE,OAAOC,6CAIXH,GACTA,EAAEI,iBACFd,KAAKe,MAAMC,YAAYhB,KAAKI,MAAMC,OAClCL,KAAKW,SAAS,CACVN,MAAO,sCAKX,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QACIyB,SAAUjB,KAAKS,aACfhB,UAAU,eACVH,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,UAAf,UACA5B,EAAAC,EAAAC,cAAA,SACI2B,SAAUnB,KAAKM,aACfO,MAAOb,KAAKI,MAAMC,MAClBe,YAAY,wBACZC,KAAK,IACLC,aAAW,wBACXC,KAAK,oBAtCJ7B,IAAMC,WCmBhB6B,mLAbP,OACIlC,EAAAC,EAAAC,cAAA,WAASiC,IAAKzB,KAAKe,MAAMW,OACrBpC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASO,KAAKe,MAAMW,OACjCpC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYO,KAAKe,MAAMY,UACpCrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQO,KAAKe,MAAMa,cAChCtC,EAAAC,EAAAC,cAAA,OAAKqC,IAAK7B,KAAKe,MAAMe,SAAW9B,KAAKe,MAAMgB,YAAaC,IAAKhC,KAAKe,MAAMW,MAAOA,MAAO1B,KAAKe,MAAMW,gBAX7FhC,IAAMC,WCuBXsC,mLApBP,OACI3C,EAAAC,EAAAC,cAAA,YACKQ,KAAKe,MAAMmB,OAAOC,IAAI,SAACC,EAAOC,GAC3B,OACI/C,EAAAC,EAAAC,cAAC8C,EAAD,CACIZ,MAAOU,EAAMV,MACba,UAAWH,EAAMG,UACjBZ,SAAUS,EAAMT,SAChBC,aAAcQ,EAAMR,aACpBY,aAAcJ,EAAMI,aACpBT,YAAaK,EAAML,YACnBD,SAAS,kDACTL,IAAKY,cAdT3C,IAAMC,WCWf8C,mLAVP,OACInD,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,4BAAqBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,QAArB,KACAH,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,2CANKE,IAAMC,WC6DZ+C,cArDX,SAAAA,IAAc,IAAA7C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IACV7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,QACKI,MAAQ,CACTC,MAAO,GACP6B,OAAQ,GACRS,OAAQ,IAEZ9C,EAAKmB,YAAcnB,EAAKmB,YAAYT,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAPTA,2EAUF+C,GAAM,IAAAC,EAAA7C,KACdA,KAAKW,SAAS,CAACN,MAAOuC,IAEtB,IAAME,EAAG,qDAAAC,OCvBH,mCDuBG,WAAAA,OAAyEH,GAClFI,MAAMF,EAAK,CACTG,OAAQ,QAEPC,KAAK,SAAAC,GACF,OAAOA,EAAQC,SAChBF,KAAK,SAAAG,GACNR,EAAKlC,SAAS,CAAEuB,OAAQmB,EAAKF,gDAMzB,IAAAG,EAAAtD,KAERgD,MADY,2IACD,CACPC,OAAQ,QAEPC,KAAK,SAAAC,GACF,OAAOA,EAAQC,SAChBF,KAAK,SAAAG,GACNC,EAAK3C,SAAS,CAAEgC,OAAQU,EAAKF,UAC7BI,QAAQC,yCAMd,OACIlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACiE,EAAD,MACAnE,EAAAC,EAAAC,cAACkE,EAAD,CAAY1C,YAAahB,KAAKgB,cAC9B1B,EAAAC,EAAAC,cAACmE,EAAD,CAAWzB,OAAQlC,KAAKI,MAAM8B,SAC9B5C,EAAAC,EAAAC,cAACoE,EAAD,cAhDElE,IAAMC,WEIJkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.91134968.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1 className=\"text-outline\">Movie Database Search v2</h1>\r\n                <h5 className=\"text-outline\">using the tMDB API</h5>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nclass SearchForm extends React.Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            query: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n    handleChange(e) {\r\n        this.setState({\r\n            query: e.target.value\r\n        })\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.searchMovie(this.state.query)\r\n        this.setState({\r\n            query: ''\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <nav>\r\n                <form\r\n                    onSubmit={this.handleSubmit}\r\n                    className=\"search-form\">\r\n                    <label htmlFor=\"search\">Search</label>\r\n                    <input\r\n                        onChange={this.handleChange}\r\n                        value={this.state.query}\r\n                        placeholder=\"search by movie title\"\r\n                        name=\"q\" \r\n                        aria-label=\"Search by movie title\"\r\n                        type=\"search\" />\r\n                </form>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchForm","import React from 'react'\r\n\r\nclass Movie extends React.Component {\r\n\r\n    //<p className=\"genre\">{this.props.genre_ids}</p>\r\n    //<p className=\"score\">Score: {this.props.vote_average}</p>\r\n\r\n    render() {\r\n        return (  \r\n            <section key={this.props.title}>\r\n                <p className=\"title\">{this.props.title}</p>\r\n                <p className=\"overview\">{this.props.overview}</p>\r\n                <p className=\"year\">{this.props.release_date}</p>               \r\n                <img src={this.props.url_path + this.props.poster_path} alt={this.props.title} title={this.props.title}/>\r\n            </section>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Movie","import React from 'react'\r\nimport Movie from './Movie'\r\n\r\nclass MovieList extends React.Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                {this.props.movies.map((movie, index) => {\r\n                    return (\r\n                        <Movie \r\n                            title={movie.title} \r\n                            genre_ids={movie.genre_ids}\r\n                            overview={movie.overview} \r\n                            release_date={movie.release_date} \r\n                            vote_average={movie.vote_average}\r\n                            poster_path={movie.poster_path}\r\n                            url_path=\"https://image.tmdb.org/t/p/w185_and_h278_bestv2\"\r\n                            key={index} />\r\n                    )\r\n                })}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieList","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <div>Copyright &copy;<span className=\"currentYear\">2019</span>,</div>\r\n                <div>originally by Valdyn Hunt &amp; Jason Campbell.</div>\r\n                <div>All rights reserved.</div>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport API_KEY from './config'\nimport './App.css';\nimport Header from './components/Header'\nimport SearchForm from './components/SearchForm'\nimport MovieList from './components/MovieList'\nimport Footer from './components/Footer'\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            query: '',\n            movies: [],\n            genres: []\n        }\n        this.searchMovie = this.searchMovie.bind(this)\n    }// end constructor\n\n    searchMovie(text) {\n        this.setState({query: text});\n\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${text}`;\n        fetch(url, {\n          method: 'GET'\n        })\n          .then(results => {\n              return results.json();\n          }).then(data => {\n            this.setState({ movies: data.results });\n          })\n\n    }// end SearchMovie function\n\n\n    getGenres() {\n        const url = 'https://gist.githubusercontent.com/jcampbell18/b84dcd06aed5714173a265bbfc5095a5/raw/83ee72e03bf2b5832e1bef6651ef4e9a2d7a9551/genres.json';\n        fetch(url, {\n            method: 'GET'\n          })\n            .then(results => {\n                return results.json();\n            }).then(data => {\n              this.setState({ genres: data.results });\n              console.log()\n            })\n\n    }// end getGenres function\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Header />\n                <SearchForm searchMovie={this.searchMovie} />\n                <MovieList movies={this.state.movies} />\n                <Footer />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","const API_KEY='7e39294bee130e927186d7b0282cb473'\r\n\r\nexport default API_KEY","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}